#ifndef PAYLOAD_H
#define PAYLOAD_H

#include <Achilles.h>
#include <exploit/dfu.h>
#include <stddef.h>

struct DeviceConfiguration {
    uint64_t cpid, largeLeak, overwritePadding, hole;
};

struct PayloadConfiguration {
    uint64_t tlbi, nopGadget, retGadget, patchAddress, ttbr0Address, functionGadget, ttbr0Write,
    memcpyAddress, aesCryptoCommand, bootTrampolineEnd, ttbr0VROMOffset, ttbr0SRAMOffset,
    gUSBSerialNumber, dfu_handle_request_address, usb_core_do_transfer, dfu_handle_bus_reset_address,
    insecureMemoryBase, handle_interface_request, usb_create_string_descriptor, usb_serial_number_string_descriptor;
};

typedef struct {
	uint32_t endpoint, pad_0;
	uint64_t io_buffer;
	uint32_t status, io_len, ret_cnt, pad_1;
	uint64_t callback, next;
} dfu_callback_t;

typedef struct {
	dfu_callback_t callback;
    uint64_t heap_pad_0, heap_pad_1;
} checkm8_overwrite_t;

typedef struct {
	uint64_t func, arg;
} callback_t;

#define MAX_BLOCK_SIZE 0x50
#define ARM_16K_TT_L2_SIZE 0x2000000U

#define DONE_MAGIC (0x646F6E65646F6E65ULL) // donedone
#define EXEC_MAGIC (0x6578656365786563ULL) // execexec
#define MEMC_MAGIC (0x6D656D636D656D63ULL) // memcmemc

uint8_t *create_gaster_overwrite_for_device(struct DeviceConfiguration *deviceConfig, struct PayloadConfiguration *payloadConfig, size_t *overwriteSize);
uint8_t *create_gaster_payload_for_device(struct DeviceConfiguration *deviceConfig, struct PayloadConfiguration *payloadConfig, size_t *payloadSize);

uint8_t *create_pongo_overwrite_for_device(struct PayloadConfiguration *payloadConfig, size_t *overwriteSize);
uint8_t *create_pongo_payload_for_device(struct DeviceConfiguration *deviceConfig, size_t *payloadSize);

#endif // PAYLOAD_H